C51 COMPILER V9.53.0.0   INIT                                                              05/30/2017 11:33:33 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INIT
OBJECT MODULE PLACED IN Init.OBJ
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE Init.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          
   2          #include "Init.h"
   3          //-----------------------------------------------------------------------------
   4          // Initialization Subroutines
   5          //-----------------------------------------------------------------------------
   6          
   7          
   8          void OSCILLATOR_Init (void)
   9          {
  10   1         U8 SFRPAGE_save = SFRPAGE;
  11   1         SFRPAGE = CONFIG_PAGE;
  12   1      
  13   1         OSCICN = 0x87;                      // Set internal oscillator divider to 1
  14   1      
  15   1         SFRPAGE = SFRPAGE_save;
  16   1      }
  17          
  18          //-----------------------------------------------------------------------------
  19          // PORT_Init
  20          //-----------------------------------------------------------------------------
  21          
  22          void PORT_Init (void)
  23          {
  24   1         U8 SFRPAGE_save = SFRPAGE;
  25   1         SFRPAGE  = CONFIG_PAGE;             // Port SFR's on Configuration page
  26   1      
  27   1         P0MDOUT  |= 0x40;                   // P0.6 (CAN0 TX) is push-pull
  28   1         P1MDOUT  |= 0x08;                   // P1.3 (LED) is push-pull
  29   1         P1MDOUT &= 0xbf;                   //P1^6 open drain for relay
  30   1        // P2MDIN |= 0xf0;                     //ADC
  31   1        // P2SKIP |= 0x0f;                     //ADC
  32   1         P2MDOUT |= 0xc0;                    //P2.6/7 for driving mosfet
  33   1         P3MDOUT |= 0xff;                            //P3 is push-pull to drive the LED.
  34   1         P4MDOUT |= 0x03;                            //P4   
  35   1      
  36   1         XBR0     = 0x02;                    // Enable CAN0 on Crossbar
  37   1         XBR2     = 0x40;                    // Enable Crossbar and weak pull-ups
  38   1      
  39   1         SFRPAGE = SFRPAGE_save;
  40   1      }
  41          
  42          //-----------------------------------------------------------------------------
  43          // ADC0_Init
  44          //-----------------------------------------------------------------------------
  45          void ADC0_Init(void)
  46          {
  47   1        U8 SFRPAGE_save = SFRPAGE;
  48   1        SFRPAGE = ACTIVE_PAGE;
  49   1      
  50   1        ADC0CF |= 0x01;
  51   1        ADC0H = 0x04;
  52   1        ADC0L = 0x48;
  53   1        ADC0H = 0x07;
  54   1        ADC0L = 0xd0;
  55   1        ADC0H = 0x08;
C51 COMPILER V9.53.0.0   INIT                                                              05/30/2017 11:33:33 PAGE 2   

  56   1        ADC0L = 0x01;
  57   1        ADC0CF &= ~0x01;
  58   1      
  59   1        ADC0CN = 0x10;           //0 start by writing 1 to AD0BUSY, 1 start by overflow of timer 1 , 3 by timer 2
  60   1      
  61   1        REF0CN = 0x03;
  62   1      
  63   1        ADC0MX = 0x10| PIN_TABLE[AMUX_INPUT];
  64   1      
  65   1        ADC0CF = ((SYSCLK /3000000) - 1) << 3;
*** ERROR C202 IN LINE 65 OF Init.c: 'SYSCLK': undefined identifier
  66   1      
  67   1        EIE1 |= 0x04;
  68   1      
  69   1        AD0EN = 1;
  70   1      
  71   1        SFRPAGE = SFRPAGE_save;
  72   1      
  73   1      }
  74          
  75          
  76          //-----------------------------------------------------------------------------
  77          // Timer2_Init
  78          //-----------------------------------------------------------------------------
  79          void Timer_Init(void)
  80          {
  81   1         U8 SFRPAGE_save = SFRPAGE;
  82   1         SFRPAGE = ACTIVE_PAGE;
  83   1       
  84   1          CKCON = 0x00;     //t1 t0 use the sys-clock/12,t3 t2 refer to TMRXCN
  85   1          
  86   1         TCON      = 0x00;      //t1 don't run temporarily,t0 don't run 
  87   1         TMOD      = 0x21;      //t1 8bit reload timer,t0 16bit timer
  88   1         TL0       = 0x90;  
  89   1         TH0       = 0xE8;      //3ms,based on 2MHz clock           ℅“車?車迆??DD?D?車那??邦芍?3ms?“那㊣
  90   1         TR0 = 1;
  91   1         ET0 = 1;
  92   1      
  93   1         TMR2CN = 0x00;                      // Stop Timer2; Clear TF2;
  94   1                                             // use SYSCLK as timebase, 16-bit
  95   1                                             // auto-reload
  96   1         CKCON |= 0x10;                      // Select SYSCLK for timer 2 source
  97   1         TMR2RL = 65535 - (SYSCLK / 10000);  // Init reload value for 10 us
*** ERROR C202 IN LINE 97 OF Init.c: 'SYSCLK': undefined identifier
  98   1         TMR2 = 0xFFFF;                      // Set to reload immediately
  99   1         ET2 = 1;                            // Enable Timer2 interrupts
 100   1         TR2 = 1;                            // Start Timer2
 101   1      
 102   1         PT2 = 1;
 103   1      
 104   1        TMR3CN    = 0x00;     //t3 16bit reload timer,don't run,sys-clock/12
 105   1          TMR3RLL   = 0x30;
 106   1          TMR3RLH   = 0xF8;
 107   1          TMR3L     = 0x30;
 108   1          TMR3H     = 0xF8;     //    車?車迆S㏒?ms?“那㊣ */
 109   1        TMR3CN |= 0x04;       //run timer3
 110   1      
 111   1         SFRPAGE = SFRPAGE_save;
 112   1      }
 113          //-----------------------------------------------------------------------------
 114          // CAN0_Init
 115          //-----------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   INIT                                                              05/30/2017 11:33:33 PAGE 3   

 116          void CAN0_Init (void)
 117          {
 118   1         U8 iter;
 119   1      
 120   1         U8 SFRPAGE_save = SFRPAGE;
 121   1         SFRPAGE  = CAN0_PAGE;               // All CAN register are on page 0x0C
 122   1      
 123   1         CAN0CN |= 0x01;                     // Start Intialization mode
 124   1      
 125   1         //---------Initialize general CAN peripheral settings
 126   1      
 127   1         CAN0CN |= 0x4E;                     // Enable Status, Error,
 128   1                                             // Module Interrupts
 129   1                                             // Enable access to bit timing register
 130   1      
 131   1         // See the CAN Bit Timing Spreadsheet for how to calculate this value
 132   1         CAN0BT = 0x1402;                    // Based on 24 Mhz CAN clock, set the
 133   1                                             // CAN bit rate to 1 Mbps
 134   1      
 135   1         //---------Initialize settings common to all message objects
 136   1      
 137   1         // Command Mask Register
 138   1         CAN0IF1CM = 0x00F0;                 // Write Operation
 139   1                                             // Transfer ID Mask, MDir, MXtd
 140   1                                             // Transfer ID, Dir, Xtd, MsgVal
 141   1                                             // Transfer Control Bits
 142   1                                             // Don't set TxRqst or transfer data
 143   1      
 144   1         // Mask Registers
 145   1         CAN0IF1M1 = 0x0000;                 // Mask Bits 15-0 not used for filtering
 146   1         CAN0IF1M2 = 0x5FFC;                 // Ignore Extended Identifier for
 147   1                                             // filtering
 148   1                                             // Used Direction bit for filtering
 149   1                                             // Use ID bits 28-18 for filtering
 150   1      
 151   1         // Arbitration Registers
 152   1         CAN0IF1A1 = 0x0000;                 // 11-bit ID, so lower 16-bits not used
 153   1      
 154   1         // Message Control Registers
 155   1         CAN0IF1MC = 0x1480 | MESSAGE_SIZE;  // Enable Receive Interrupt
*** ERROR C202 IN LINE 155 OF Init.c: 'MESSAGE_SIZE': undefined identifier
 156   1                                             // Message Object is a Single Message
 157   1                                             // Message Size set by #define
 158   1      
 159   1      
 160   1         //---------Initialize unique settings for Rx message object
 161   1      
 162   1         // Arbitration Registers
 163   1         CAN0IF1A2 = 0x8000 | (ERCP_ID << 2);  // Set MsgVal to valid
 164   1                                               // Set Object Direction to read
 165   1                                               // Set 11-bit Identifier to iter
 166   1      
 167   1         CAN0IF1CR = ERCP_ID;                // Start command request
 168   1      
 169   1            while (CAN0IF1CRH & 0x80) {}       // Poll on Busy bit
 170   1      
 171   1      
 172   1         CAN0IF1A2 = 0x8000 | (Broadcast_ID << 2);  // Set MsgVal to valid
 173   1                                               // Set Object Direction to read
 174   1                                               // Set 11-bit Identifier to iter
 175   1      
 176   1         CAN0IF1CR = Broadcast_ID;                // Start command request
C51 COMPILER V9.53.0.0   INIT                                                              05/30/2017 11:33:33 PAGE 4   

 177   1      
 178   1            while (CAN0IF1CRH & 0x80) {}       // Poll on Busy bit
 179   1         // Message Control Registers
 180   1         CAN0IF1MC = 0x0080 | MESSAGE_SIZE;  // Disable Transmit Interrupt
*** ERROR C202 IN LINE 180 OF Init.c: 'MESSAGE_SIZE': undefined identifier
 181   1                                             // Message Object is a Single Message
 182   1                                             // Message Size set by #define
 183   1      
 184   1         //---------Initialize unique settings for Tx message object
 185   1         // Arbitration Registers
 186   1         CAN0IF1A2 = 0xA000 | (BPCP_ID << 2);  // Set MsgVal to valid
 187   1                                               // Set Direction to write
 188   1                                               // Set 11-bit Identifier to iter
 189   1      
 190   1         CAN0IF1CR = BPCP_ID;                // Start command request
 191   1      
 192   1         while (CAN0IF1CRH & 0x80) {}       // Poll on Busy bit
 193   1      
 194   1         CAN0IF1A2 = 0xA000 | (IPM_ID << 2);  // Set MsgVal to valid
 195   1                                               // Set Direction to write
 196   1                                               // Set 11-bit Identifier to iter
 197   1      
 198   1         CAN0IF1CR = IPM_ID;                // Start command request
 199   1      
 200   1         while (CAN0IF1CRH & 0x80) {}       // Poll on Busy bit
 201   1         //---------Initialize settings for unused message objects
 202   1      
 203   1         for (iter = 0; iter < MESSAGE_OBJECTS; iter++)
*** ERROR C202 IN LINE 203 OF Init.c: 'MESSAGE_OBJECTS': undefined identifier
 204   1         {
 205   2          if(iter != ERCP_ID && iter != BPCP_ID && iter != Broadcast_ID && iter != IPM_ID)
 206   2         {
 207   3            // Set remaining message objects to be Ignored
 208   3            CAN0IF1A2 = 0x0000;              // Set MsgVal to 0 to Ignore
 209   3            CAN0IF1CR = iter;                // Start command request
 210   3      
 211   3            while (CAN0IF1CRH & 0x80) {}     // Poll on Busy bit
 212   3          }
 213   2         }
 214   1      
 215   1         CAN0CN &= ~0x41;                    // Return to Normal Mode and disable
 216   1                                             // access to bit timing register
 217   1      
 218   1         SFRPAGE = SFRPAGE_save;
 219   1      }
 220          
 221          void CAN0_TransferMO (U8 obj_num)
 222          {
 223   1         // This function assumes that the message object is fully initialized
 224   1         // in CAN0_Init and so all it has to do is fill the data registers and
 225   1         // initiate transmission
 226   1      
 227   1         U8 SFRPAGE_save = SFRPAGE;
 228   1         SFRPAGE  = CAN0_PAGE;               // All CAN register are on page 0x0C
 229   1      
 230   1         // Initialize all 8 data bytes even though they might not be sent
 231   1         // The number to send was configured earlier by setting Message Control
 232   1      
 233   1         CAN0IF1DA1L = *CAN_Tx_Buf;              // Initialize data registers based
 234   1         CAN0IF1DA1H = *(CAN_Tx_Buf + 1);          // on message object used
 235   1         CAN0IF1DA2L = *(CAN_Tx_Buf + 2);
 236   1         CAN0IF1DA2H = *(CAN_Tx_Buf + 3);
C51 COMPILER V9.53.0.0   INIT                                                              05/30/2017 11:33:33 PAGE 5   

 237   1         CAN0IF1DB1L = *(CAN_Tx_Buf + 4);
 238   1         CAN0IF1DB1H = *(CAN_Tx_Buf + 5);
 239   1         CAN0IF1DB2L = *(CAN_Tx_Buf + 6);
 240   1         CAN0IF1DB2H = *(CAN_Tx_Buf + 7);
 241   1      
 242   1         CAN0IF1CM = 0x0087;                 // Set Direction to Write
 243   1                                             // Write TxRqst, all 8 data bytes
 244   1      
 245   1         CAN0IF1CR = obj_num;                // Start command request
 246   1      
 247   1         while (CAN0IF1CRH & 0x80) {}        // Poll on Busy bit
 248   1      
 249   1         SFRPAGE = SFRPAGE_save;
 250   1      }
 251          
 252          
 253          
 254          

C51 COMPILATION COMPLETE.  0 WARNING(S),  5 ERROR(S)
